===The Script Interpreter===

Gavin Andresen once pointed out there are no bitcoins, only transactions.

He's referring to the fact that all transfers of bitcoin are atomic.
An old, unspent coin is destroyed, and new outputs are created.
The reallocation is dictated by something called bitcoin script.


===Bitcoin Script===

Every time a coin is transferred, requirements for redemption are 
expressed as Bitcoin Script. It's purpose is to:
 - prevent anyone from stealing the coins
 - allows the coin to be retrieved as terms dictate


===Script===

Script is a very simply byte-code language. Each script scope a stack. There are two types of opcodes:
  - those which push data to the stack
  - those which operate on the stack
   eg, OP_ADD, OP_SUB, OP_XOR, OP_DUP, OP_EQUAL, OP_CHECKSIG 
    
When an opcode is run, it will consume values from the stack (or throw an error).
Usually, they operate on consumed values and push new data back onto the stack.

===OPCODES===

- OP_ADD / OP_SUB / OP_MUL / OP_DIV
Consume two values from the stack, and push the single result
  
- OP_DUP
Duplicates the value at the top of the stack
   
- OP_EQUAL
Compare the first two values on the stack, pushing a boolean indicating the result.
 
- OP_EQUALVERIFY: 
The same as OP_EQUAL, but causes an error if the values are not equal
 
- OP_SHA256 / OP_RIPEMD160 / OP_HASH256 / OP_HASH160 / OP_SHA1
Consume the first value of the stack, and push the resulting hash.
 
- OP_IF / OP_ELSE / OP_ENDIF
Flow control, based on values on the stack
  
===Simple examples 1===
 1 1 OP_ADD  


{|
|  || 1 1 OP_ADD
|-
| 1 || 1 OP_ADD
|-
| 1 1 || OP_ADD
|-
| 2 || 
|}

### Opcodes & Stack push's

